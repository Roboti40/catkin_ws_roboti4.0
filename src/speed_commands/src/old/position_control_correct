#!/usr/bin/env python
import rospy
from Phidget22.Phidget import *
from Phidget22.Devices.DCMotor import *
import serial
import time
import numpy as np

def setup_motor(serial_number, channel):
    motor = DCMotor()
    motor.setDeviceSerialNumber(serial_number)
    motor.setChannel(channel)
    motor.openWaitForAttachment(5000)
    return motor

# ROS node initialization
rospy.init_node('motor_test')

# Create and setup motors with the correct mapping
dcMotor1 = setup_motor(487541, 0) # backleft
dcMotor2 = setup_motor(487541, 1) # backright
dcMotor3 = setup_motor(487736, 0) # frontright
dcMotor4 = setup_motor(487736, 1) # frontleft

# Serial communication setup for Arduino
ser = serial.Serial('/dev/ttyACM0', 115200, timeout=1)

# Function to send motor commands
def set_motor_speeds(speeds):
    dcMotor1.setTargetVelocity(-speeds[0])  # backleft
    dcMotor2.setTargetVelocity(-speeds[1])  # backright
    dcMotor3.setTargetVelocity(speeds[2])  # frontright
    dcMotor4.setTargetVelocity(speeds[3])  # frontleft

# Function to read encoder values
def read_encoders():
    if ser.in_waiting > 0:
        line = ser.readline().decode('utf-8').strip()
        print(f"Raw data received: '{line}'")  # Debugging statement
        if line:
            try:
                positions = list(map(float, line.split(',')))
                if len(positions) == 4:
                    return positions
                else:
                    print("Error: Expected 4 encoder values, got", len(positions))
            except ValueError:
                print("Error: Received data is not in the expected format")
    return None

# Function to calculate wheel speeds using the kinematic model
def mecanum_wheel_speeds(vx, vy, omega):
    L = 0.73  # Distance between front and back wheels in meters
    W = 0.52  # Distance between left and right wheels in meters
    R = 0.05  # Wheel radius in meters

    # Kinematic matrix for Mecanum wheels
    mat = np.matrix([
        [1, -1, -(L + W)],
        [1, 1, (L + W)],
        [1, 1, -(L + W)],
        [1, -1, (L + W)]
    ])

    cmd_vel = np.matrix([vx, vy, omega]).T
    wheel_vel = (1 / R) * (mat * cmd_vel).A1
    return wheel_vel.tolist()

# Control algorithm to move to (x, y)
def move_to(x_target, y_target):
    # Initialize variables
    current_position = np.array([0.0, 0.0])
    k_p = 0.01  # Proportional gain (tune this value)
    encoder_positions = np.array([0.0, 0.0, 0.0, 0.0])

    while True:
        # Read encoders
        encoder_values = read_encoders()
        if encoder_values:
            # Update the current position based on encoder values (implement proper kinematics)
            # The order of encoder values: backleft, backright, frontright, frontleft
            encoder_positions = np.array(encoder_values)
            current_position = np.array([encoder_positions[3], encoder_positions[2]])  # This should be correctly mapped

            # Calculate error
            error = np.array([x_target, y_target]) - current_position

            # Calculate control signal (simple proportional controller)
            control_signal = k_p * error

            # Extract desired velocities
            vx = control_signal[0]
            vy = control_signal[1]
            omega = 0  # Assuming no rotation for simplicity

            # Convert control signal to motor speeds (using kinematics for Mecanum wheels)
            motor_speeds = mecanum_wheel_speeds(vx, vy, omega)

            # Scale motor speeds to be within the range -1.0 to 1.0
            max_speed = max(abs(speed) for speed in motor_speeds)
            if max_speed > 1.0:
                motor_speeds = [speed / max_speed for speed in motor_speeds]

            # Send motor speeds in the correct order: backleft, backright, frontright, frontleft
            set_motor_speeds(motor_speeds)

            # Check if the position is close enough to the target
            if np.linalg.norm(error) < 0.01:
                print("Target reached")
                break

            time.sleep(0.1)  # Control loop delay

if __name__ == '__main__':
    try:
        move_to(0.0, -1.0)  # Example target position (in meters)
    except KeyboardInterrupt:
        print("Program terminated")
    finally:
        set_motor_speeds([0, 0, 0, 0])  # Stop all motors
        ser.close()
        dcMotor1.close()
        dcMotor2.close()
        dcMotor3.close()
        dcMotor4.close()

